///////////////////////////////////////////////////////////
//  LightSaber.cs
//  Implementation of the Class LightSaber
//  Generated by Enterprise Architect
//  Created on:      30-May-2021 2:56:55 PM
//  Original author: Reza
///////////////////////////////////////////////////////////

using System;
using DG.Tweening;
using UnityEngine;

namespace FireByte
{
    public class LightSaber : MonoBehaviour,IRotateWithTweener
    {
        private bool m_finishMovement;

        public bool IsFnishMovement
        {
            get
            {
                return m_finishMovement;
            }
        }
        
        private LightSaberController m_controller;
        private Tween rotateTween;
        [SerializeField] private static bool m_hited;
        [SerializeField] private LightSaberCollider m_lightSaberCollider;

        [SerializeField] private float m_goBackAnimationAngle;
        [SerializeField] private float m_rotationAnimationAngle;
        [SerializeField] private float m_beforeStartAnimationDuration;
        [SerializeField] private float m_rotateAnimationDuration;
        public void Initialize(LightSaberController controller,float goBackAnimationAngle,float rotationAnimationAngle,float beforeStartAnimationDuration,float rotateAnimationDuration)
        {
            m_goBackAnimationAngle = goBackAnimationAngle;
            m_rotationAnimationAngle = rotationAnimationAngle;
            m_beforeStartAnimationDuration = beforeStartAnimationDuration;
            m_rotateAnimationDuration = rotateAnimationDuration;
            
            m_controller = controller;
            m_lightSaberCollider.Initialize(this);
            StartPosition();
        }

        public void StartPosition()
        {
            m_finishMovement = false;
            transform.eulerAngles = Vector3.zero;
        }
        
        /// 
        /// <param name="rotateDirection"></param>
        /// <param name="value"></param>
        public void Rotate(RotateDirection rotateDirection, float value)
        {
            Vector3 vectorValue = transform.localEulerAngles;

            switch (rotateDirection)
            {
                case RotateDirection.YAxis:
                    vectorValue = new Vector3(vectorValue.x, value, vectorValue.z);
                    break;
                case RotateDirection.XAxis:
                    vectorValue = new Vector3(value, vectorValue.y, vectorValue.z);
                    break;
                case RotateDirection.ZAxis:
                    vectorValue = new Vector3(vectorValue.x, vectorValue.y, value);
                    break;
            }

            transform.eulerAngles = vectorValue;
        }

        public void OnHitEnter(Vector3 hitPoint)
        {
            rotateTween.Kill();
            if (!m_hited)
            {
                m_hited = true;
                m_controller.LightSabersHit(hitPoint);
            }
        }

        public void OnHitExit()
        {
            m_hited = false;
        }

        public void RotateAnimateY()
        {
            m_hited = false;
            Vector3 localEulerAngles = transform.localEulerAngles;
            transform.DOLocalRotate(
                new Vector3(localEulerAngles.x, localEulerAngles.y + m_goBackAnimationAngle, localEulerAngles.z), m_beforeStartAnimationDuration).SetEase(Ease.InOutExpo).OnComplete(() =>
            {
                rotateTween = transform.DOLocalRotate(
                    new Vector3(localEulerAngles.x, localEulerAngles.y - m_rotationAnimationAngle, localEulerAngles.z),m_rotateAnimationDuration,RotateMode.FastBeyond360).SetEase(Ease.InOutExpo)
                    .OnComplete(()=> m_finishMovement = true);
            });
        }

        public void RotateWithTween(float x,float z)
        {
            transform.DOLocalRotate(new Vector3(x, transform.localEulerAngles.y, z), m_rotateAnimationDuration);
        }
    } //end LightSaber
} //end namespace FireByte